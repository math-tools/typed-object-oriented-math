// ---------- //


==
31  (0.0.0-alpha.15)
==

-----
:new:
-----

[[:api:]]
Types.

    1) \Alg.

        * The \api of ''Group'' exposes a function ''inv'' to be implemented.

        * Full implementation of ''QuotFieldOf (DR : IntDomain)'' that  replaces ''QuotFieldOf (DR : IntDomain , QFtype : Field)''.

        * New ''OrderedQuotFieldOf (ODR : OrderedIntDomain)'' and ''TotalOrderedQuotFieldOf (TODR : TotalOrderedIntDomain)''.

    1) Classical sets.

        * ''NatSet'' is now a subtype of ''TotalOrderedMonoidAdd''.

        * ''IntSet'' is now a subtype ''TotalOrderedDomainAddProd''.

        * ''RatSet'' type becomes functional.

    1) Fundations.

        * ''QuotientSetOf (PreQT : Set)'' replaces ''QuotientOf (PreQT : Set , QType : Set)''.

        * ''in'' for the versatile quotient type was missing.

        * Axioms for ''lt'' of ordered sets was missing.


--------
:update:
--------

[[:api:]]
Types: in fundations, better implementation of ''equal'' for the versatile quotient type.


// ---------- //


==
30  (0.0.0-alpha.14)
==

-----
:new:
-----

[[:api:]]
Types.

    1)In \alg, all the proposed \structs now have an ordered version.

    1) Fundations: ''equal'' for the versatile quotient type was missing.

    1) Sets: parsing rule added to allow to write ''{E} * {F}'' instead of ''(prod E F)''.

    1) Core \functios.

        * New \func "for_toks_explicit_list" to iterate over "[: a | b | c | ... :]".

        * New \func ''type_ext_from'' to build types using tokens.

        * The directive ''with'' can be used for complicated \sign just before the \def of a \func (see ''equal'' for the versatile quotient).


--------
:update:
--------

[[:api:]]
Types: in \alg, the ''Ring'' type uses constructive \specs.


-------
:break:
-------

[[:api:]]
Types: \chges of the core \functios.

    1) ''Untyped'' has been renamed ''Unspec''.

    1) ''same_tokens'' has been renamed ''same_full_expansion''.

    1) ''alias_from'' has been removed.


// ---------- //


==
28  (0.0.0-alpha.13)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Classical sets: fixed types for ''Nat'', ''Int'', ''Rat'', ''Real'' and ''Complex''.

    1) Core \functios.

        * ''(obj : OneType)'' is a core boolean like the one used to test equality for example.

        * \B is "just" ''{: true , false :}'', and an inhabitant on ''Bool'' is just an \obj equal to ''true'' or ''false'' (the previous \specs used a circular \def).

        * ''ExplicitFiniteSet'' becomes a core independant feature with two new \funcs ''disj_union_set.inj_1'' and ''disj_union_set.inj_2'' added.

        * ''{::}'' is the explicit "finite" empty set.

        * Non initiated \vars and unimplemented \funcs indicate a strict interface.


--------
:update:
--------

[[:api:]]
Types: for classical sets, the \std \funcs use ''Set | ExplicitFiniteSet'' in their \sign suchas to allow to combine explicit finite sets with other kinds of set.


-------
:break:
-------

[[:api:]]
Types.

    1) Parsing rules must use "typed" \params suchas to capture the types needed to match the good parsing (''E * F'' can be the cartesian \prod of the sets ''E'' and ''F'', the pointwise \prod of the \funcs ''E'' and ''F''...).

    1) Features removed.

        * ''BoolSet'' no longer exists.

        * The weird \func ''Set.disj_union_set.proj'' just needs to go the swiming pool.


// ---------- //


==
27  (0.0.0-alpha.12)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Sets.

        * ''equal'' of ''Set'' and ''MultiSet'' have been implemented.

        * The \syst knows that ''empty_set = empty_multiset'' thanks to the polymorphism of the special \func ''equal''.

        * Core \functios: ''equal'' has a post-\cond to indicate the reflexitivy \prop.

    1) Finite explicit sets: new type ''ExplicitFiniteSet'' with associated \funcs ''add'', ''diff'', ''union'', ''disj_union'', ''prod''.

    1) \Std algebraic \structs: ''op_ntimes'' for ''Monoid'' type with also ''ntimes'' alias for ''Add'' like \structs, and ''pow'' alias for ''Prod'' like \structs.

    1) Core \functios.

        * New \func ''iter_ntimes'' to apply ''nb'' times the same \appli on a start \val where ''nb in \N''.

        * New \func "for_toks_explicit_set" to iterate over "{: a | b | c | ... :}".


--------
:update:
--------

[[:tech:]]
The implementation of \funcs ''equal'' must be done outside any type!


-----
:fix:
-----

[[:api:]]
Types: the \funcs ''equal'' of ''NatSet'' and ''IntSet'' were indeed for ''Nat'' and ''Int''.


// ---------- //


==
26  (0.0.0-alpha.11)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Natural and integer sets.

        * ''NatSet'' has been extended to ''TotalOrderedSet''.

        * ''IntSet : DomainAddProd'' has moved to ''IntSet : Set'' with ''equal'' function implemented, and been extended to ''TotalOrderedSet''.

        * Injection from ''NatSet'' into ''IntSet''.

    1) Changes for sets.

        * Each set has now an ''InSet'' type attribut.

        * New \func ''disj_union'' for disjunct union of two sets with its associated internal functions (projections and injections).

        * New ''OrderedSet'' and ''TotalOrderedSet'' types with the classical shortcuts ''<'', ''<='', ''>'' and ''>=''.

    1) New directive: ''is_pair'' is well named, and a pattern matching for pairs in the style of \python has been added.

    1) Core \functios.

        * For iterations.

            i) New \function ''equal_iter'' to test if two \objs can be accesed by the same \nb of itertions of a given \ope.

            i) New \function ''lt_iter'' to test if an \obj uses more \nb of iterations of an \appli than another from a start \obj.

            i) New \function ''lte_iter'' to test if an \obj uses more or same \nb of iterations of an \appli than another from a start \obj.

        * Anonymous \var or \func, or unuseful name just has to be named ''_''.

        * Unspec and non-semantic \cst \symbs ''symb_0'', ''symb_1'' and ''symb_2'' added: they have the fixed "SymbType" type (it can't be subtyped).

        * It is now possible to use pointed \OP like syntax to add dynamically functions to one type.

        * Shortcuts like ''a = b = c = d'' for ''a = b and b = c and c = d'' are allowed.

        * Use of axioms is allowed inside the implementation of a \func (for example, this can indicate some pre-conditions).


[[:doc:]]
Naming.

    1) Names like ''__...__'' indicate a "dangerous" \obj.

    1) Names like ''_...'' are for unpublic \objs.


[[:tech:]]
The \func ''equal'' can't be recursive: when ''... = ...'' is used inside the implementation of ''equal'', we have to look for an ''equal'' \func using a weaker type.


-------
:break:
-------

[[:api:]]
Types.

    1) Explicit finite sets are typed ''{: ... :}'' instead of ''{ ... }'' because this last one was messy to use regarding the blocks of multiline intructions ''{ ... }''.

    1) We use now ''{**}'' for the empty multiset, but we keep the unambiguous ''{}'' for the empty "classical" set.


-----
:fix:
-----

[[:api:]]
Types: good implementation of the product of two sets.


// ---------- //


==
25
==

--------
:update:
--------

[[:doc:]]
\Intro: the explanations have been simplified and the constructivist approach indicated.



// ---------- //


==
23  (0.0.0-alpha.10)
==

-----
:new:
-----

[[:api:]]
Types.

    1) New \funcs for the ''\N'' \objs.

        * ''lt'', 'lte'', ''gt'' and ''gte'' for ''<'', '<='', ''>'' and ''>=''.

        * ''min'', ''max'' and ''diff_up''.

    1) New ''MultiSet'' and ''EmptyMultiSet'' types with ''sum'', ''union'', ''inter'' and ''diff'', but no ''prod''.

    1) The versatile ''equal'' has been implemented using the new directive ''same_tokens'' to test if we have the same writing after basic "full expansion": for example, ''succ (succ zero)'' is equal to itslef, but also to ''succ one'' if ''one := succ zero''.

    1) New directive: ''same_tokens'' (see the previous point).


--------
:break:
--------

[[:api:]]
Types: the directive ''ext'' has been renamed ''type_ext''.


--------
:update:
--------

[[:api:]]
Types: ''NatSet : MonoidAdd'' has moved to ''NatSet : Set''.


// ---------- //


==
22  (0.0.0-alpha.9)
==

-----
:new:
-----

[[:api:]]
Types.

    1) New things for sets.

        * \Cst ''empty_set'' that can be written ''{}''.

        * Product, union, intersection and difference of two sets implemented.

    1) The core \func ''iter_set'' and ''iter_set_ns'' have been added.

    1) Non lexical equalities between same typable \objs must be implemented using the special \func ''equal'' with \signs ''OneType -> OneType -> \B''.

        * Equality between ''Set'' type \objs specified.

        * Equality between natural \nbs added.

    1) New ''fix'' directive to avoid the change of \objs like the ''in'' \func of ''Set'' \obj (a \func can have \diff fixed version regarding the \sign used).
    From now, ''const'', ''var'' and ''func'' are basic internal fundamental kinds of \obj (''fix const'' is meaningless).


-------
:break:
-------

[[:api:]]
Types: use of the ''{ ... }'' syntax instead of the messy ''+ ...'' one.


--------
:update:
--------

[[:api:]]
Types.

    1) Axioms use '':='' instead of '':'' for logical reasons.

    1) The \sign ''M -> M -> M'' is preferred to ''M * M -> M'' (it's more convenient).

        * ''or'' and ''and'' have the type ''\B -> \B -> \B''.

        * For magmas, ''op'' has the type ''M -> M -> M''.

    1) Use of ''NegSet'' and ''PosSet'' instead of ''Z_non_neg'' and ''Z_non_pos'' for the ''IntSet'' type.

    1) The path::''core'' folder groups together specific, indispensable \functios such as the ''Unspec'' type, the booleans, the iterative constructions on set-like types....

    1) \Specs for natural \nb \objs become core ones.


-----
:fix:
-----

[[:api:]]
Types.

    1) For integral domain, subtype ''Domain'' was missing in ''type DomainIntegral : Domain''.

    1) ''var id in M'' muste have been transofrmed into ''var id : Unspec'' followed by the axiom ''neutral_elt := id in M''.


// ---------- //


==
21  (0.0.0-alpha.8)
==

-----
:new:
-----

[[:api:]]
Types.

    1) \Desc and notes in the \specs have been moved into a special comment, and we use of a versatile \tnsdoc like \doc.

    1) ''type-ext' block becomes the ''ext'' directive (this is more logical).

    1) Boolean set implementing using a small trick.

    1) ''func'' can be implemnted: only match \ocmal-like can be used at this time.

    1) ''const'' automatically guesses the type.


-----
:fix:
-----

[[:api:]]
Types: ''var id in M'' instead of ''const type id in M''.


// ---------- //


==
16
==

-----
:fix:
-----

[[:api:]]
Types: no need to use an hidden amo::''_QStruct'' field type.


// ---------- //


==
15  (0.0.0-alpha.7)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Domain and integral domain types.

    1) Parametric types allow to build types from type \args.

    1) Special quotient types.

        + The versatile "universal" quotient type.

        + The quotient field of an integral domain.

        + The rational field.

    1) Hidden \objs must have a name starting with an \_.

    1) ''alias_from'' tries to simplify aliasing from the same \obj.


--------
:update:
--------

[[:api:]]
Types: simplification of the naming of public object (no need to use extra prefix)


-----
:fix:
-----

[[:api:]]
Types: the \prev field type was just a division ring one. We have updated the \specs and add a field type with a mandatory abelian \prod.


// ---------- //


==
14  (0.0.0-alpha.6)
==

-----
:new:
-----

[[:api:]]
Types: the parsing rule amo::''{x1, x2, ...}'' allows to use unbounded \nb of \args.


-----
:fix:
-----

[[:api:]]
Types.

    1) Ring type: clarifications needed about the double \struct of the domain set.

    1) The field type needs to say that the "prod" \grp \struct is obtained without the zero-like \elt.

    1) The \int type needs to work with "non-\pos" and "non-\neg" \elts instead of "\pos" and "\neg" ones.


// ---------- //


==
13  (0.0.0-alpha.5)
==

-----
:new:
-----

[[:api:]]
Types: the definitions of natural and integer sets look good.


// ---------- //


==
13  (0.0.0-alpha.4)
==

-----
:new:
-----

[[:api:]]
Types: for an endo\func amo::''func f : S -> S'' and amo::''e in S'', we have a built-in recursive rule amo::''iter_set f e'' which is the subset of amo::''S'' obtained from amo:''{e}'' by iteratively applying amo::''f'' a finite number of times.


// ---------- //


==
12  (0.0.0-alpha.3)
==

-----
:new:
-----

[[:api:]]
Types: redefining and erasing axioms is now possible.


// ---------- //


==
12  (0.0.0-alpha.2)
==

-----
:new:
-----

[[:api:]]
Types: the rules look good. We still need to define other default types to identify any missing concepts.


// ---------- //


==
12  (0.0.0-alpha.1)
==

-----
:new:
-----

[[:doc:]]
Naming: conventions have been added.


// ---------- //


==
09  (0.0.0-alpha.0)
==

Starting this \proj that defines an \ascii \dsl made to facilitate the writing and the manipulations of \math \objs.
