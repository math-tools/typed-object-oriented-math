note::
    ????
    equal ==> PosSet NegSet vide !!! le démontre...

    ???
    aussi zero ni pos ni neg

    If ''one'' is défined by ''one := succ zero'', we have ''succ x = x + one''
    as expected.

    verbatim::
        succ x
        =
        succ (x + zero)
        =
        x + (succ zero)
        =
        x + one


    Now, if ''minus_one'' is defined by ''minus_one := pred zero'', the
    following steps show that ''one + minus_one = zero'' is true as expected
    (remember the ''succ_injective'' axiom).

    verbatim::
        succ (one + minus_one)
        =
        one + (succ minus_one)
        =
        one + (succ (pred zero))
        =
        one + zero
        =
        one
        =
        succ (zero)


    Another expected property is ''pred (succ x) = x''.

    verbatim::
        succ (pred (succ x))
        =  { y := succ x }
        succ (pred y)
        =
        y
        =
        succ x


    We also have ''pred (x + y) = x + (pred y)''.

    verbatim::
        succ (pred (x + y))
        =
        x + y
        =
        x + succ (pred y)
        =
        succ (x + (pred y))


    Let's finish with ''x * (pred y) + x = x * y'' that gives
    ''x * minus_one + x = x * zero = zero'' as expected.

    verbatim::
        x * (pred y) + x
        =
        x * (succ (pred y))
        =
        x * y








    We just have to take care of the euclidean \div, \gcd and \lcm
    of `a` and `b` regarding their signs.

        * \gcd and \lcm is \pos by convention.

        * For euclidean \div, let's `(q, r)` be the quotient and the
        remainder of the \int euclidean \div of `a` by `b`, and also
        `abs(a) = abs(b) q' + r'` be the \nat euclidean \div of
        `abs(a)' by `abs(b)`. We maust have `0 <= r < abs(b)`.

            i) If `a = 0`, or `a > 0` and b > 0`, then we have
            `(q, r) = (q' , r')`.

            i) If `a > 0` and b < 0`, then `(q , r) = (-q', r')'.

            i) Let's suppose that `a < 0` and b > 0`. We have
            `abs(a) = b q' + r'` with `0 <= r' < b` that gives
            `a = b (- q') - r'` but `-b < r' <= 0` is not the good
            condition when r < 0. In that special case, we have
            `a = b (- q' - 1) + (b - r')` but `0 < b - r' < b` as
            expected.

                + If `r' = 0` then `(q , r) = (- q', r')'.

                + If `r' > 0` then `(q , r) = (1 - q', b - r')'.

            i) If `a < 0` and b < 0`, we have a similar situation
            noting that `b = - abs(b)`.

                + If `r' = 0` then `(q , r) = (q', r')'.

                + If `r' > 0` then `(q , r) = (q' + 1, - b - r')'.

    On peut résumer comme suit.

            i) If `a < 0` and `r' = 0`, then `(q , r) = (- sign(b)*q', r')'.

            i) If `a < 0` and `r' > 0`, then `(q , r) = (1 - sign(b)*q', -b - r')'.


            i) If `a >= 0`, then `(q , r) = (sign(b)*q', r')'.
