this::
	date = 2024-08-23


======================
Écrire pour définir...
======================

\thisproj propose un \syst de \defs d'\objs \maths afin de permettre la conception d'\applis pour des usages sémantique \etou logique
((
	Le champ des possibles est \grd...
)).
Voici des exemples envisageables d'utilisation du \lang de \thisproj.

	1) \Mef d'\objs \maths saisis de façon intuitive.

	1) \Ana et validation d'un contenu \math.

	1) \Calcs symboliques ou numériques.

	1) \Demos semi-automatisées.


La \def des \objs \maths emploie les ingrédients suivants.

	1) **Les \objs doivent être typés.**
	Par exemple, ''func f: \N -> \Q'' définit une fonction `f` associant un rationnel à chaque naturel.

	1) ***Les \objs ont des propriétés.**
	Par exemple, ''forall x : \P , f x = 0'' indique que ''f: \N -> \Q'' s'annule en tout \nbre premier
	((
		L'emploi d'une notation fonctionnelle à la \lisp, \haskell ou \coq rend de \grds services lors de la déclaration de \props.
	)).
	Noter l'emploi de ''x : \P'' pour indiquer une \var de type "\nbre premier", et non un \elt de l'\ens des \nbres premiers (voir la mise en garde ci-dessous).


note::
	Le \lang de \thisproj se veut le plus constructif possible afin de permettre une plus \grde puissance de \calc et des \demos semi-automatisées efficaces.


caution::
	Les théories des types ne tiennent pas compte, ou presque, de la très connue théorie des \enss. \thisproj respecte ce choix : on utilisera de \pref ''x : \N'' au lieu de ''x in \N'', même si cette dernière écriture est possible ici car l'\obj ''\N'' est de type "\ens"
	((
		Techniquement, ''x in \N'' est juste un alias de ''x : \N''.
	)).
	Pour comprendre mieux ce choix, demandez-vous ce que veut dire "`n` est un naturel" ? Pour travailler efficacement avec `n`, il faut penser à \ttes les \props et règles de \manip des entiers naturels. Ceci est contenu dans la notation ''x : \N'' qui peut enbarquée le concept d'appartenance, et non dans ''x in \N''.
