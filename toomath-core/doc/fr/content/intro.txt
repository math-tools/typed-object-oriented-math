this::
	date = 2024-08-21


======================
Écrire pour définir...
======================

\thisproj tente de proposer un \syst simple de \def^os d'\objs \maths, via le jeu de caractères \ascii, ceci afin de permettre des analyses sémantique et logique. L'objectif est d'aider à la conception d'\applis comme les suivantes
((
	Le champ des possibles est \grd...
)).

	1) \Mef d'\objs \maths saisis de façon intuitive.

	1) \Ana et validation d'un contenu \math.

	1) \calcs symboliques ou numériques.

	1) \Demos semi-automatisées.


Pour ce faire, \thisproj utilise les ingrédients suivants pour définir les \objs \maths avant de pouvoir les utiliser dans différents \ctxts.

	1) **Les \objs doivent être typés.**
	Par exemple, ''func f: \N -> \Q'' définit une fonction `f` associant chaque naturel à un rationnel.

	1) ***Les \objs ont des propriétés.**
	Par exemple, ''forall x : \P , f x = 0'' indique que ''f: \N -> \Q'' s'annule en tout \nbre premier
	((
		L'emploi d'une notation fonctionnelle à la \lisp, \haskell ou \coq rend de \grds services lors de la déclaration de \props.
	)).
	Noter l'emploi de ''x : \P'' pour indiquer une \var de type "\nbre premier".


note::
	Le mini-\lang de \thisproj se veut le plus constructif possible afin de permettre une plus \grde puissance de \calc et des \demos semi-automatisées efficaces.


caution::
	Les théories des types ne tiennent pas compte, ou presque, de la très connue théorie des \enss. \thisproj respecte ce choix : c'est pour cela que l'on utilisera par défaut ''x : \P'' au lieu de ''x in \P'', bien que cette dernière écriture soit possible ici car l'\obj ''\P'' respecte le contrat du type "\ens"
	((
		Techniquement, ''x in \P'' est juste un alias de ''x : \P''.
	)).
