/***
=============
Ordered rings
=============
***/

type OrderedRing : Ring + OrderedSet as OR {
// The "OrderedSet'' type needs the function attribute ''lt''.

  type_ext GrpOpAdd : OrderedGroupAbelian {
// We could have used ''func lt := lt'', but we're going for expressiveness here.
    func lt := OR.lt
  }

// Just one new important axiom.
  axiom {
    pos_times_pos_is_pos :=
      forall x y in OR ,
      (id_add < x and id_add < y) ==> (id_add < (op_prod x y))
  }
}


type TotalOrderedRing : OrderedRing + TotalOrderedSet
