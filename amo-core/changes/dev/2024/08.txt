// ---------- //


==
20
==

--------
:update:
--------

[[:api:]]
Types: simplification of the parsing rule for unbounded \nb of \args. For example, we just use amo::''parse "{x, ...} in S" as (in x = true)'' to allow ''x y in S'' as a shorcut for ''S.in x = true , S.in y = true''.


// ---------- //


==
02  (0.0.0-alpha.17)
==

-----
:new:
-----

[[:api:]]
Types.

    1) New things for ''NatSet''.

        * \Funcs ''div'', ''quot'', ''rem'', ''gcd'' and ''lcm'' added.

        * \Attr ''NonZeroSet'' added.

    1) New things for ''IntSet''.

        + \Attrs ''NonZeroSet'', ''NonPosSet'' and ''NonNegSet'' added.

        + \Attrs ''one'' and ''minus_one'' added.

        * \Func ''cano_inj_to_nat : IntSet.NonNegSet -> NatSet'' added.

        * \Funcs ''abs'' and ''sign'' added.

        * \Funcs ''div'', ''quot'', ''rem'', ''gcd'' and ''lcm'' added.

    1) ''RatSet.repr'' gives the reduced form of a \frac.


-----
:fix:
-----

[[:api:]]
Types: several misuses of \func \signs.


// ---------- //


==
02  (0.0.0-alpha.16)
==

-----
:new:
-----

[[:api:]]
Types.

    1) Fundations: \inter for sets was missing.

    1) Core \functios: \inter for explicit finite sets was missing.


[[:doc:]]
Types: all \tech \docs have been written (the previous small proofs have been transferred to the incoming user-friendly French \doc).


// ---------- //


==
01
==

--------
:update:
--------

[[:facto:]]
Types: \funcs are implemented outside the \def of a type, except for the very special ''in'' function for sets. This is easy to do, thanks to the syntactic sugar ''with (...) in {...}''.
